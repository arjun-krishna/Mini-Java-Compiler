//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
    Integer t;
    Boolean proc;
    Boolean putToStack;
    Boolean printLabel;
    Boolean requestTemp;
    Stack<String> funcStack;
    Stack<Stack<String>> layers;

    public GJDepthFirst(Integer initTemp) {
      t = initTemp;
      proc = false;
      putToStack = false;
      printLabel = false;
      requestTemp = false;
      funcStack = new Stack<String>();
      layers = new Stack<Stack<String>>();
    }

    public String genTemp() {
      return ("TEMP "+t++);
    }

   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      System.out.println("MAIN");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      System.out.println("END");
      printLabel = false;
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      printLabel = true;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      printLabel = false;
      String l =(String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String il = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      System.out.println(l+" [ "+il+" ]");
      proc = true;
      n.f4.accept(this, argu);
      proc = false;
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      printLabel = false;
      n.f0.accept(this, argu);
      printLabel = true;
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("NOOP");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("ERROR");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Exp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String temp = (String) n.f1.accept(this, argu);
      Boolean local = printLabel;
      if(local)
        printLabel = false;
      String l = (String) n.f2.accept(this, argu);
      System.out.println("CJUMP "+temp+" "+l);
      if(local)
        printLabel = true;
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Boolean local = printLabel;
      if(local)
        printLabel = false;
      String l = (String) n.f1.accept(this, argu);
      System.out.println("JUMP "+l);
      if(local)
        printLabel = true;
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Exp()
    * f2 -> IntegerLiteral()
    * f3 -> Exp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String temp1 = (String) n.f1.accept(this, argu);
      String il = (String) n.f2.accept(this, argu);
      String temp2 = (String) n.f3.accept(this, argu);
      System.out.println("HSTORE "+temp1+" "+il+" "+temp2);
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Exp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String temp = (String) n.f1.accept(this, argu);
      String exp = (String) n.f2.accept(this, argu);
      String il = (String) n.f3.accept(this, argu);
      System.out.println("HLOAD "+temp+" "+exp+" "+il);
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String temp1 = (String) n.f1.accept(this, argu);
      String temp2 = (String) n.f2.accept(this, argu);
      System.out.println("MOVE "+temp1+" "+temp2);
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> Exp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String temp = (String) n.f1.accept(this, argu);
      System.out.println("PRINT "+temp);
      return _ret;
   }

   /**
    * f0 -> StmtExp()
    *       | Call()
    *       | HAllocate()
    *       | BinOp()
    *       | Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      Boolean local = putToStack;
      putToStack = false;
      requestTemp = true;
      String temp = (String) n.f0.accept(this, argu);
      requestTemp = false;
      if(local) {
        funcStack.push(temp);
        putToStack = true;
      }
      _ret = (R) temp;
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> Exp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      requestTemp = false;
      R _ret=null;
      Boolean local = proc;
      if(local)  {
        System.out.println("BEGIN");
        proc = false;
      }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      _ret = n.f3.accept(this, argu);
      if(local) {
        System.out.println("RETURN");
        System.out.println(_ret);
      }
      n.f4.accept(this, argu);
      if(local) 
        System.out.println("END");
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> Exp()
    * f2 -> "("
    * f3 -> ( Exp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      requestTemp = false;
      R _ret=null;
      n.f0.accept(this, argu);
      String func = (String) n.f1.accept(this, argu);
      putToStack = true;
      layers.push(funcStack);
      funcStack = new Stack<String>();
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String temp = genTemp();
      System.out.print("MOVE "+temp+" CALL "+func+" ( ");
      Stack<String> rev = new Stack<String>();
      while(!funcStack.empty()) {
        rev.push(funcStack.pop());
      }
      while(!rev.empty()) {
        System.out.print(" "+rev.pop()+" ");
      }
      System.out.println(" )");
      putToStack = false;
      funcStack = layers.pop();
      _ret = (R) temp;
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> Exp()
    */
   public R visit(HAllocate n, A argu) {
      requestTemp = false;
      R _ret=null;
      n.f0.accept(this, argu);
      String alloc = (String) n.f1.accept(this, argu);
      String temp = genTemp();
      System.out.println("MOVE "+temp+" HALLOCATE "+alloc);
      _ret = (R) temp;
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Exp()
    * f2 -> Exp()
    */
   public R visit(BinOp n, A argu) {
      requestTemp = false;
      R _ret=null;
      String op = (String) n.f0.accept(this, argu);
      String temp1 = (String) n.f1.accept(this, argu);
      String temp2 = (String) n.f2.accept(this, argu);
      String temp = genTemp();
      System.out.println("MOVE "+temp+" "+op+" "+temp1+" "+temp2);
      _ret = (R) temp;
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      switch(n.f0.which) {
        case 0 :
          _ret = (R) "LE";
          break;
        case 1 :
          _ret = (R) "NE";
          break;
        case 2 :
          _ret = (R) "PLUS";
          break;
        case 3 :
          _ret = (R) "MINUS";
          break;
        case 4 :
          _ret = (R) "TIMES";
          break;
        case 5 :
          _ret = (R) "DIV";
          break;
      }
      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      requestTemp = false;
      R _ret=null;
      n.f0.accept(this, argu);
      String i = (String) n.f1.accept(this, argu);
      _ret = (R) ("TEMP "+i);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R) n.f0.toString();
      if (requestTemp) {
        String temp = genTemp();
        System.out.println("MOVE "+temp+" "+n.f0.toString());
        _ret = (R) temp;
      }
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R) n.f0.toString();
      if(printLabel) {
        System.out.print(_ret+" ");
        printLabel = false;
      }
      if (requestTemp) {
        String temp = genTemp();
        System.out.println("MOVE "+temp+" "+n.f0.toString());
        _ret = (R) temp;
      }
      return _ret;
   }

}
