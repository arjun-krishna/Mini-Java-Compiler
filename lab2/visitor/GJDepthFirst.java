//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
    HashMap<String,HashMap<String,String>> classVariables;
    HashMap<String,HashMap<String,HashMap<String,String>>> classMethods;
    List<String []> classRelation;
    List<String> basicTypes;
    List<String> declaredClasses;

    String currentClass;
    String currentFunction;
    Integer argNum;
    boolean getIDType;
    HashMap<String,String> method;
    Stack<HashMap<String,String>> methodStack;
    Stack<Integer> argStack;

    public GJDepthFirst(HashMap<String,HashMap<String,String>> a,HashMap<String,HashMap<String,HashMap<String,String>>> b,List<String []> c,List<String> bt,List <String> dc) 
    {
      classVariables = a;
      classMethods = b;
      classRelation = c;
      basicTypes = bt;
      declaredClasses = dc;

      currentClass = null;
      currentFunction = null;
      argNum = 0;
      getIDType = true;
      method = null;
      methodStack = new Stack<HashMap<String,String>>();
      argStack = new Stack<Integer>();
      argStack.push(0);
      methodStack.push(null);
    }

    public void typeError() {
      System.out.println("Type error");
      System.exit(-1);
    }

    public boolean match(String l,String r) { 
      if (l == null || r == null) { // to prevent npe
        typeError();
      } 
      if(basicTypes.contains(l) && basicTypes.contains(r))
        return l.equals(r);
      else if(declaredClasses.contains(l) && declaredClasses.contains(r)) {
        // match when l is an ancestor of r
        if(l.equals(r))
          return true;
        else {
          String parent = parentOf(r);
          while(parent != null){
            if(l.equals(parent)) 
              return true;
            parent = parentOf(parent);
          }
          return false; // L is not a ancestor of R
        } 
      } 
      else {
        //System.err.println("e1");
        typeError();
      }
      return false;
    }
    public void initMethodMatch(String className,String methodName) {
      // contained in className
      if(className == null || methodName == null) { // to prevent npe
        typeError();
      }

      if(!declaredClasses.contains(className)){
        //System.err.println("e32");
        typeError();
      }
      HashMap<String,HashMap<String,String>> hm = classMethods.get(className);
      if(hm.containsKey(methodName)){
        method = hm.get(methodName);
        methodStack.push(method);
        return;
      }

      // contained in a ancestor

      String parent = parentOf(className);
      while(parent!=null) {
        hm = classMethods.get(parent);
        if(hm.containsKey(methodName)) {
          method = hm.get(methodName);
          methodStack.push(method);
          return;
        }
        parent = parentOf(parent);
      }

      // didn't find the method
      //System.err.println("e2");
      typeError();
    }

    public String parentOf(String className) {
      for(int i=0;i<classRelation.size();i++) 
      {
        if(className.equals((classRelation.get(i))[0]))
          return (classRelation.get(i))[1];
      }
      //System.err.println("e3");
      typeError();
      return null;
    }

    public String getTypeOfVar(String id) { 

      // check current method scope
      if (currentClass == null || currentFunction == null) // Main class // to prevent npe
        typeError();
      //System.err.println("query : "+id+" in Class "+currentClass+" in function "+currentFunction);
      HashMap<String,String> hm = (classMethods.get(currentClass)).get(currentFunction);
      if(hm.containsKey(id)) {
        return hm.get(id);
      }

      // check class scope

      hm = classVariables.get(currentClass);
      if(hm.containsKey(id)) {
        return hm.get(id);
      }
      
      // check parent scope 

      String parent = parentOf(currentClass);
      while(parent != null) { // terminates because cyclic definition is identified in pass 1
        hm = classVariables.get(parent);
        if(hm.containsKey(id)) {
          return hm.get(id);
        }
        parent = parentOf(parent);
      }
      // no luck finding the variable
      //System.err.println("e4 -- "+id);
      typeError(); // un-declared identifier
      return null;
    }


   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      getIDType = false;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      getIDType = true;
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu); // Separate Case (PrintStatement)
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      getIDType = false;
      n.f0.accept(this, argu);
      String className = (String) n.f1.accept(this, argu);
      currentClass = className;
      getIDType = true;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      currentClass = null;
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      getIDType = false;
      n.f0.accept(this, argu);
      String className = (String) n.f1.accept(this, argu);
      currentClass = className;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      getIDType = true;
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      currentClass = null;
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      getIDType = false;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      getIDType = true;
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      getIDType = false;
      n.f0.accept(this, argu);
      String retType = (String) n.f1.accept(this, argu);
      String fName = (String) n.f2.accept(this, argu);
      currentFunction = fName;
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      getIDType = true;
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      String gotRet = (String) n.f10.accept(this, argu);
      if(!match(retType,gotRet)){
        //System.err.println("e6");
        typeError();
      }
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      currentFunction = null;
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=(R)"int[]";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=(R)"boolean";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=(R)"int";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      String typeLHS = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String typeRHS = (String) n.f2.accept(this, argu);
      if(!match(typeLHS,typeRHS)) {
        //System.err.println("e7");
        typeError();
      }
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      String idType = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String indexType = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String rhsType = (String) n.f5.accept(this, argu);
      if(!match(idType,"int[]")) {
        //System.err.println("e8");
        typeError();
      }
      else if(!match(indexType,"int")){
        //System.err.println("e9");
        typeError();
      }
      else if(!match(rhsType,"int")){
        //System.err.println("e10");
        typeError();
      }
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String expType = (String) n.f2.accept(this, argu);
      if(!match(expType,"boolean")){
        //System.err.println("e11");
        typeError();
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String expType = (String) n.f2.accept(this, argu);
      if(!match(expType,"boolean")){
        //System.err.println("e12");
        typeError();
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String expType = (String) n.f2.accept(this, argu);
      if(!match(expType,"boolean")){
        //System.err.println("e13");
        typeError();
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String expType = (String) n.f2.accept(this, argu);
      if(!match(expType,"int")) { // System.out.println can print only int
        //System.err.println("e14");
        typeError();
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) { //done
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) { //done
      R _ret=(R)"boolean";
      String typeL = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String typeR = (String) n.f2.accept(this, argu);
      if(!match(typeL,typeR) || !match(typeL,"boolean")) {
        //System.err.println("e15");
        typeError();
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=(R)"boolean";
      String typeL = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String typeR = (String) n.f2.accept(this, argu);
      if(!match(typeL,typeR) || !match(typeL,"boolean")) {
        //System.err.println("e16");
        typeError();
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=(R)"boolean";
      String typeL = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String typeR = (String) n.f2.accept(this, argu);
      if(!match(typeL,typeR) || !match(typeL,"int")) {
        //System.err.println("e17");
        typeError();
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=(R)"boolean";
      String typeL = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String typeR = (String) n.f2.accept(this, argu);
      if(!match(typeL,typeR) || !(match(typeL,"int") || match(typeL,"boolean"))) {
        //System.err.println("e18");
        typeError();
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=(R)"int";
      String typeL = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String typeR = (String) n.f2.accept(this, argu);
      if(!match(typeL,typeR) || !match(typeL,"int")) {
        //System.err.println("e19");
        typeError();
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=(R)"int";
      String typeL = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String typeR = (String) n.f2.accept(this, argu);
      if(!match(typeL,typeR) || !match(typeL,"int")) {
        //System.err.println("e20");
        typeError();
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=(R)"int";
      String typeL = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String typeR = (String) n.f2.accept(this, argu);
      if(!match(typeL,typeR) || !match(typeL,"int")) {
        //System.err.println("e21");
        typeError();
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=(R)"int";
      String typeL = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String typeR = (String) n.f2.accept(this, argu);
      if(!match(typeL,typeR) || !match(typeL,"int")) {
        //System.err.println("e22");
        typeError();
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=(R)"int";
      String id = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String index = (String) n.f2.accept(this, argu);
      if(!match(id,"int[]") || !match(index,"int")) {
        //System.err.println("e23");
        typeError();
      }
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=(R)"int";
      String id = (String) n.f0.accept(this, argu);
      if(!match(id,"int[]")) {
        //System.err.println("e24");
        typeError();
      }
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      String className = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      getIDType = false;
      String methodName = (String) n.f2.accept(this, argu);
      getIDType = true;
      argStack.push(argNum);
      argNum = 0;
      initMethodMatch(className,methodName);
      method = methodStack.peek();
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      // get return type
      Integer expectedNoOfArgs = Integer.parseInt(method.get("0"));
      if(expectedNoOfArgs != argNum) {
        //System.err.println("e30");
        typeError();
      }
      argNum = argStack.peek();
      argStack.pop();
      _ret = (R) method.get("return");
      methodStack.pop();
      method = methodStack.peek();
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      String type = (String) n.f0.accept(this, argu);
      String expType = method.get((++argNum).toString());
      //System.err.println("arg "+argNum+" : "+type+" -- expected : "+expType);
      if(!match(expType,type)) {
        //System.err.println("e25");
        typeError();
      }
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String type = (String) n.f1.accept(this, argu);
      String expType = method.get((++argNum).toString());
      //System.err.println("arg "+argNum+" : "+type+" -- expected : "+expType);
      if(!match(expType,type)) {
        //System.err.println("e26");
        typeError();
      }
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) { // to do :  Identifier, Allocation
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) { //done
      R _ret=(R)"int";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) { //done
      R _ret=(R)"boolean";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) { //done
      R _ret=(R)"boolean";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) { //to be done
      R _ret=null;
      n.f0.accept(this, argu);
      String id = n.f0.toString();
      if(!getIDType)
        _ret = (R) id;
      else {
        _ret = (R) getTypeOfVar(id);
      }
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) { //done
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R) currentClass;
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) { //done
      R _ret=(R)"int[]";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String type = (String) n.f3.accept(this, argu);
      if(type == null) { //prevent npe
        typeError();
      }
      if(!type.equals("int")) {
        //System.err.println("e27");
        typeError();
      }
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) { //done
      R _ret=null;
      n.f0.accept(this, argu);
      getIDType = false;
      String id = (String) n.f1.accept(this, argu);
      if(!declaredClasses.contains(id)) { // check if declared class
        //System.err.println("e28");
        typeError();
      }
      _ret = (R) id;
      getIDType = true;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) { //done
      R _ret=(R)"boolean";
      n.f0.accept(this, argu);
      String type = (String) n.f1.accept(this, argu);
      if(type == null) { // to prevent npe
        typeError();
      }
      if(!type.equals("boolean")) {
        //System.err.println("e29");
        typeError();
      }
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) { //done
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      getIDType = false;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      getIDType = true;
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
