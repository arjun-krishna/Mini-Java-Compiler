//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //

    ST SymbolTable;
    HashMap<String,ClassObject> hm;
    String currentClass;
    String currentMethod;
    Integer TEMP;
    Integer LABEL;
    boolean flag;
    String classUnderConsideration;
    boolean request;
    Integer argNum;
    List<String> ARGS;
    Stack<List<String>> argStack;
    HashMap<String,String> tempMap;


    public GJDepthFirst(ST s) {
      SymbolTable = s;
      hm = SymbolTable.hm;
      currentClass = null;
      currentMethod = null;
      TEMP = 20;
      LABEL = 1;
      flag = false;
      request = false;
      argStack = new Stack<List<String>>();
      ARGS = null;
    }

    String getFuncTemp(String id) {
      if(tempMap.containsKey(id)) {
        return tempMap.get(id);
      }
      return null;
    }
    String getClassVar(String id) {
      ClassObject obj = hm.get(currentClass);
      String temp = "";
      for(int i=0; i < obj.data.size(); i++) {
        String a = obj.data.get(i);
        a = a.split("~")[1];
        if(a.equals(id)) {
          temp = genTemp();
          System.out.println(" HLOAD "+temp+" TEMP 0 "+(i+1)*4);
          break;
        }
      }
      return temp;
    }


    public String genTemp() {
      return (" TEMP "+ (TEMP++) +" ");
    }

    public String genLabel() {
      return (" L"+(LABEL++)+" ");
    }

    public String genCodeClass(String className) {
      ClassObject obj = hm.get(className);
      int vTableSize = (obj.VTable.size())*4;
      int dataSize = obj.data.size();
      int sizeToAlloc = (dataSize + 1)*4;
      System.out.println(" BEGIN ");
      String vTableTemp = genTemp();
      String objTemp = genTemp();
      System.out.println(" MOVE "+vTableTemp+" HALLOCATE "+vTableSize);
      System.out.println(" MOVE "+objTemp+" HALLOCATE "+sizeToAlloc);
      for(int i=0;i<obj.VTable.size();i++) {
        String functionName = obj.VTable.get(i);
        System.out.println(" HSTORE "+vTableTemp+i*4+" "+functionName.split("~")[0]+"_"+functionName.split("~")[1]);
      }
      if(dataSize != 0) {
        String dataInitTemp = genTemp();
        System.out.println(" MOVE "+dataInitTemp+" 4 ");
        String entryLabel = genLabel();
        String exitLabel = genLabel();
        System.out.println(entryLabel+" CJUMP LE "+dataInitTemp+(sizeToAlloc-1)+" "+exitLabel);
        System.out.println(" HSTORE PLUS"+dataInitTemp+objTemp+" 0 0 ");
        System.out.println(" MOVE "+dataInitTemp+" PLUS "+dataInitTemp+" 4 ");
        System.out.println(" JUMP "+entryLabel);
        System.out.println(exitLabel+" HSTORE "+objTemp+" 0 "+vTableTemp);
      } else {
          System.out.println(" HSTORE "+objTemp+" 0 "+vTableTemp);
      }
      System.out.println(" RETURN ");
      System.out.println(objTemp);
      System.out.println(" END ");
      return objTemp;
    }

    void functionOffset(String objTemp,String fName) {
      ClassObject obj = hm.get(classUnderConsideration);
      // System.out.println("->"+objTemp+" -- "+fName+" -- "+classUnderConsideration);
      for(int i=0; i < obj.VTable.size(); i++ ) {
        String s = obj.VTable.get(i).split("~")[1];
        if(s.equals(fName)) {
          System.out.println(" BEGIN ");
          String vTableTemp = genTemp();
          System.out.println(" HLOAD "+vTableTemp+objTemp+" 0 ");
          String functionTemp = genTemp();
          System.out.println(" HLOAD "+functionTemp+vTableTemp+(i*4));
          System.out.println(" RETURN ");
          System.out.println(functionTemp);
          System.out.println(" END ");
          break;
        }
      }
    }


   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      System.out.println(" MAIN ");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      System.out.println(" END ");
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String className = (String) n.f1.accept(this, argu);
      currentClass = className;
      n.f2.accept(this, argu);
      // n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      currentClass = null;
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String className = (String) n.f1.accept(this, argu);
      currentClass = className;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      // n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      currentClass = null;
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String id = (String) n.f1.accept(this, argu);
      String temp = genTemp();
      tempMap.put(id,temp);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String functionName = (String) n.f2.accept(this, argu);
      currentMethod = functionName;
      tempMap = new HashMap<String,String>();
      argNum = 1;
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      System.out.println(currentClass+"_"+currentMethod+" [ "+argNum+" ] ");
      System.out.println(" BEGIN ");
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      String retTemp = (String) n.f10.accept(this, argu);
      System.out.println(" RETURN ");
      System.out.println(retTemp);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      System.out.println(" END ");
      currentMethod = null;
      tempMap = null;
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String id = (String) n.f1.accept(this, argu);
      String temp = " TEMP "+argNum;
      tempMap.put(id,temp);
      argNum++;
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=(R)"int[]";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=(R)"boolean";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=(R)"int";
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      String id = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String val = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      String temp = getFuncTemp(id);
      if(temp != null) {
        System.out.println(" MOVE "+temp+val);
      } else {
        ClassObject obj = hm.get(currentClass);
        for(int i=0; i < obj.data.size(); i++) {
          String a = obj.data.get(i);
          a = a.split("~")[1];
          if(a.equals(id)) {
            System.out.println(" HSTORE TEMP 0 "+(i+1)*4+" "+val);
            break;
          }
        }
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      String id = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String offset = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String val = (String) n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      String temp = getFuncTemp(id);
      String actualOffset = genTemp();
      System.out.println(" MOVE "+actualOffset+" PLUS "+offset+" 1 ");
      System.out.println(" MOVE "+actualOffset+" TIMES "+actualOffset+ " 4 ");
      if(temp != null) {
        System.out.println(" MOVE "+temp+" PLUS "+temp+actualOffset);
        System.out.println(" HSTORE "+temp+" 0 "+val);
      } else {
        ClassObject obj = hm.get(currentClass);
        for(int i=0; i < obj.data.size(); i++) {
          String a = obj.data.get(i);
          a = a.split("~")[1];
          if(a.equals(id)) {
            String base = genTemp();
            System.out.println(" HLOAD "+base+" TEMP 0 "+ (i+1)*4);
            System.out.println(" MOVE "+base+" PLUS "+base+actualOffset);
            System.out.println(" HSTORE "+base+" 0 "+val);
            break;
          }
        }
      }
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String a = (String) n.f2.accept(this, argu);
      String label1 = genLabel();
      System.out.println(" CJUMP "+a+label1);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      System.out.println(label1+" NOOP ");
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String a = (String) n.f2.accept(this, argu);
      String label1 = genLabel();
      String label2 = genLabel();
      n.f3.accept(this, argu);
      System.out.println(" CJUMP "+a+label1);
      n.f4.accept(this, argu);
      System.out.println(" JUMP "+label2);
      n.f5.accept(this, argu);
      System.out.println(label1+" NOOP ");
      n.f6.accept(this, argu);
      System.out.println(label2+" NOOP ");
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String label1 = genLabel();
      String label2 = genLabel();
      System.out.println(label1+" NOOP ");
      String a = (String) n.f2.accept(this, argu);
      System.out.println(" CJUMP "+a+label2);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      System.out.println(" JUMP "+label1);
      System.out.println(label2+" NOOP ");
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String a = (String) n.f2.accept(this, argu);
      System.out.println(" PRINT "+a);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      flag = true;
      _ret = n.f0.accept(this, argu);
      flag = false;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      String retTemp = genTemp();
      String label1 = genLabel();
      String label2 = genLabel();
      String a = (String) n.f0.accept(this, argu);
      System.out.println(" CJUMP "+a+label1);    // label 1 -- false
      n.f1.accept(this, argu);
      String b = (String) n.f2.accept(this, argu);
      System.out.println(" CJUMP "+b+label1);
      System.out.println(" MOVE "+retTemp+" 1 ");
      System.out.println(" JUMP "+label2);
      System.out.println(label1+"NOOP\n"+" MOVE "+retTemp+" 0 ");
      System.out.println(label2+" NOOP ");
      _ret = (R) retTemp;    
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      String retTemp = genTemp();
      String label1 = genLabel();
      String label2 = genLabel();
      String label3 = genLabel();
      String a = (String) n.f0.accept(this, argu);
      System.out.println(" CJUMP "+a+label1);  // b check
      System.out.println(" MOVE "+retTemp+" 1 ");
      System.out.println(" JUMP "+label2);
      System.out.println(label1);
      n.f1.accept(this, argu);
      String b = (String) n.f2.accept(this, argu);
      System.out.println(" CJUMP "+b+label3);
      System.out.println(" MOVE "+retTemp+" 1 ");
      System.out.println(" JUMP "+label2);
      System.out.println(label3+" NOOP\n"+" MOVE "+retTemp+" 0 ");
      System.out.println(label2+" NOOP ");
      _ret = (R) retTemp;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      String retTemp = genTemp();
      String a = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String b = (String) n.f2.accept(this, argu);
      System.out.println(" MOVE "+retTemp+" LE "+a+b);
      _ret = (R) retTemp;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      String retTemp = genTemp();
      String a = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String b = (String) n.f2.accept(this, argu);
      System.out.println(" MOVE "+retTemp+" NE "+a+b);
      _ret = (R) retTemp;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      String retTemp = genTemp();
      String a = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String b = (String) n.f2.accept(this, argu);
      System.out.println(" MOVE "+retTemp+" PLUS "+a+b);
      _ret = (R) retTemp;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      String retTemp = genTemp();
      String a = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String b = (String) n.f2.accept(this, argu);
      System.out.println(" MOVE "+retTemp+" MINUS "+a+b);
      _ret = (R) retTemp;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      String retTemp = genTemp();
      String a = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String b = (String) n.f2.accept(this, argu);
      System.out.println(" MOVE "+retTemp+" TIMES "+a+b);
      _ret = (R) retTemp;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;
      String retTemp = genTemp();
      String a = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String b = (String) n.f2.accept(this, argu);
      System.out.println(" MOVE "+retTemp+" DIV "+a+b);
      _ret = (R) retTemp;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      String retTemp = genTemp();
      String base = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String index = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      String indexTemp = genTemp();
      System.out.println(" MOVE "+indexTemp+" PLUS "+index+" 1 ");
      System.out.println(" MOVE "+indexTemp+" TIMES "+indexTemp+" 4 ");
      System.out.println(" MOVE "+base+" PLUS "+base+indexTemp);
      System.out.println(" HLOAD "+retTemp+base+" 0 ");
      _ret = (R) retTemp;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      String retTemp = genTemp();
      String base = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      System.out.println(" HLOAD "+retTemp+base+" 0 ");
      _ret = (R) retTemp;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      request = true;
      classUnderConsideration = null;
      String obj = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      request = false;
      flag = false;
      String fName = (String) n.f2.accept(this, argu);
      flag = true;
      n.f3.accept(this, argu);
      argStack.push(ARGS);
      ARGS = new ArrayList<String>();
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      String retTemp = genTemp();
      System.out.println(" MOVE "+retTemp+" CALL ");
      functionOffset(obj,fName);//,classUnderConsideration)
      System.out.print(" ( "+obj+" ");
      
      for(int i =0;i<ARGS.size(); i++) {
        System.out.print(" "+ARGS.get(i)+" ");
      }
      System.out.println(" ) ");
      _ret = (R) retTemp;
      ARGS = argStack.pop();
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      String temp = (String) n.f0.accept(this, argu);
      ARGS.add(temp);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String temp = (String) n.f1.accept(this, argu);
      ARGS.add(temp);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R) (" "+n.f0.toString()+" ");
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R) " 1 ";
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R) " 0 ";
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if(!flag) {
        _ret = (R) n.f0.toString();
      } else {
        String temp = getFuncTemp(n.f0.toString());
        if(temp != null)
          _ret = (R) temp;
        else {
          temp = getClassVar(n.f0.toString());
          _ret = (R) temp;
        }
      }
      if(request) {
        if(SymbolTable.funcData.get(currentClass).get(currentMethod).containsKey(n.f0.toString())) {
          classUnderConsideration = SymbolTable.funcData.get(currentClass).get(currentMethod).get(n.f0.toString());
        } else {
          List<String[]> t = SymbolTable.variableMap.get(currentClass);
          for(int i=0;i<t.size();i++) {
            if(t.get(i)[0].equals(n.f0.toString())) {
              classUnderConsideration = t.get(i)[1];
              break;
            }
          }
          if(classUnderConsideration == null ){

            List<String[]> L = SymbolTable.classRelation;
            String cur = currentClass;
            String parent = null;
            for(int i=0;i<L.size();i++) {
              if(L.get(i)[0].equals(cur)) {
                parent = L.get(i)[1];
              }
            }
            while(parent!=null){
              t = SymbolTable.variableMap.get(parent);
              for(int i=0;i<t.size();i++) {
                if(t.get(i)[0].equals(n.f0.toString())) {
                  classUnderConsideration = t.get(i)[1];
                  break;
                }
              }
              if(classUnderConsideration == null) {
                cur = parent;
                for(int i=0;i<L.size();i++) {
                  if(L.get(i)[0].equals(cur)) {
                    parent = L.get(i)[1];
                  }
                }
              } else {
                break;
              }
            }
          }
        }
      }
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R) " TEMP 0 ";
      if(request) {
        classUnderConsideration = currentClass;
      }
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String sizeTemp = (String) n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String retTemp = genTemp();
      String allocSize = genTemp();
      System.out.println(" MOVE "+allocSize+" PLUS "+sizeTemp+" 1");
      System.out.println(" MOVE "+allocSize+" TIMES "+allocSize+ " 4 ");
      System.out.println(" MOVE "+retTemp+" HALLOCATE "+allocSize);
      String iterator = genTemp();
      String offset = genTemp();
      String entrylabel = genLabel();
      String exitLabel = genLabel();
      String limit = genTemp();
      System.out.println(" MOVE "+limit+" MINUS "+allocSize+" 1 ");
      System.out.println(" MOVE "+iterator+" 4 ");
      System.out.println(entrylabel+" NOOP ");
      System.out.println(" CJUMP LE "+iterator+limit+exitLabel);
      System.out.println(" HSTORE PLUS "+retTemp+iterator+" 0 "+" 0 ");
      System.out.println(" MOVE "+iterator+" PLUS "+iterator+" 4 ");
      System.out.println("JUMP "+entrylabel);
      System.out.println(exitLabel+" NOOP ");
      System.out.println(" HSTORE "+retTemp+" 0 "+sizeTemp);
      _ret = (R) retTemp;
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      flag = false;
      request = false;
      String className = (String) n.f1.accept(this, argu);
      flag = true;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      String objTemp = genTemp();
      System.out.print(" MOVE "+objTemp+" ");
      genCodeClass(className);
      _ret = (R) objTemp;
      classUnderConsideration = className;
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String temp = (String) n.f1.accept(this, argu);
      String retTemp = genTemp();
      String label1 = genLabel();
      String label2 = genLabel();
      System.out.println(" CJUMP "+temp+label1);
      System.out.println(" MOVE "+retTemp+" 0 ");
      System.out.println(" JUMP "+label2);
      System.out.println(label1+" MOVE "+retTemp+" 1 ");
      System.out.println(label2+" NOOP ");
      _ret = (R) retTemp;
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
