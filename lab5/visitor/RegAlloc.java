//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class RegAlloc<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
//________________________________________________________________________________________________

  RegAllocInfo info;                  // final register allocation
  Integer count;                      // statement's count
  LiveInfo liveInfo;                  // store for each statement the corresponding use,def,in,out,succ
  HashMap<String,Integer> labels;
  Integer maxArgSize;

  public class Instruction {          // used for passing as argument
    public Set<Integer> use;                 
    public Set<Integer> def;

    public Instruction() {
      use = new HashSet<Integer>();
      def = new HashSet<Integer>();
    }
  }

  public RegAlloc(RegAllocInfo r,HashMap<String,Integer> l) {
    info = r;
    labels = l;
    count = 0;
    liveInfo = new LiveInfo();
  }

//________________________________________________________________________________________________


   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         LinkedList<R> list = new LinkedList<R>();
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            list.add(e.nextElement().accept(this,argu));
            _count++;
         }
         return (R) list;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      maxArgSize = 0;
      String function = "MAIN";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      // Treat main like anyother procedure
      Set<Integer> successor = new HashSet<Integer>();
      successor.add(0);
      liveInfo.succ.put(count,successor);

      info.maxCallArgSize.put(function,maxArgSize);
      Integer start = 1,end = count;
      liveInfo.livelinessAnalysis(start,end);

      // can be but in a function ! (y) perhaps in livelinessAnalysis
      HashMap<Integer,Integer> varLifeStart = new HashMap<Integer,Integer>();
      HashMap<Integer,Integer> varLifeEnd = new HashMap<Integer,Integer>(); 

      for(int i=start;i<end;i++) {
        Set<Integer> s = liveInfo.def.get(i);
        for(Integer var : s) {
          if(!varLifeStart.containsKey(var)) {
            varLifeStart.put(var,i);
            varLifeEnd.put(var,i);
          } else {
            if(varLifeEnd.get(var) < i) {
              varLifeEnd.put(var,i);
            }
          }
        }
        for(Integer var : liveInfo.in.get(i)) {
          if(!varLifeEnd.containsKey(var)) {
            varLifeEnd.put(var,i);
          } else {
            if(varLifeEnd.get(var) < i) {
              varLifeEnd.put(var,i);
            }
          }
        }
      }

      Integer s=0,t=0,stack=0;
      Set<Integer> temps = varLifeStart.keySet();
      List<LiveVar> liveInterval = new ArrayList<LiveVar>();
      for (Integer temp : temps) {
        LiveVar var = new LiveVar(temp,varLifeStart.get(temp),varLifeEnd.get(temp));
        liveInterval.add(var);
      }

      Collections.sort(liveInterval);

      // Call the LinearScan Class !
      HashMap<Integer,Alloc> map = new HashMap<Integer,Alloc>();
      LinearScan ls = new LinearScan(0,liveInterval,map,stack);
      stack += ls.linear_scan_register_allocation();

      info.regAlloc.put(function,map);
      info.stackAlloc.put(function,stack);

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      maxArgSize = 0;
      String function = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Integer params = (Integer) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      Integer start = ++count;
      Set<Integer> successor = new HashSet<Integer>();
      successor.add(count+1);
      liveInfo.succ.put(count,successor);
      Set<Integer> use = new HashSet<Integer>();
      Set<Integer> def = new HashSet<Integer>();
      liveInfo.use.put(count,use);
      liveInfo.def.put(count,def);
      for(Integer i=0;i<params;i++) { // TEMP 0 to TEMP(param-1) defined here
        def.add(i);
      }
      n.f4.accept(this, argu);

      info.maxCallArgSize.put(function,maxArgSize);
      Integer end = count;
      liveInfo.livelinessAnalysis(start,end);

      HashMap<Integer,Integer> varLifeStart = new HashMap<Integer,Integer>();
      HashMap<Integer,Integer> varLifeEnd = new HashMap<Integer,Integer>(); 

      for(int i=start;i<end;i++) {
        Set<Integer> s = liveInfo.def.get(i);
        for(Integer var : s) {
          if(!varLifeStart.containsKey(var)) {
            varLifeStart.put(var,i);
            varLifeEnd.put(var,i);
          } else {
            if(varLifeEnd.get(var) < i) {
              varLifeEnd.put(var,i);
            }
          }
        }
        for(Integer var : liveInfo.in.get(i)) {
          if(!varLifeEnd.containsKey(var)) {
            varLifeEnd.put(var,i);
          } else {
            if(varLifeEnd.get(var) < i) {
              varLifeEnd.put(var,i);
            }
          }
        }
      }
      HashMap<Integer,Alloc> map = new HashMap<Integer,Alloc>();
      Integer s=0,t=0,stack=0;
      for(int i=0;i<params;i++) {
        if(i<=3) {
          Alloc allocation = new Alloc("s"+s++);
          map.put(i,allocation);
        } else {
          Alloc allocation = new Alloc(stack++);
          map.put(i,allocation);
        }
        varLifeStart.remove(i);
        varLifeEnd.remove(i);
      }

      Set<Integer> temps = varLifeStart.keySet();
      List<LiveVar> liveInterval = new ArrayList<LiveVar>();
      for (Integer temp : temps) {
        LiveVar var = new LiveVar(temp,varLifeStart.get(temp),varLifeEnd.get(temp));
        liveInterval.add(var);
      }

      Collections.sort(liveInterval);
      stack += 20;                                         // Save all the registers + some free space
      
      // Call the LinearScan Class !
      LinearScan ls = new LinearScan(s,liveInterval,map,stack);
      stack += ls.linear_scan_register_allocation();

      info.regAlloc.put(function,map);
      info.stackAlloc.put(function,stack);

      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      count++;
      Instruction ins = new Instruction();
      liveInfo.use.put(count,ins.use);
      liveInfo.def.put(count,ins.def);
      argu = (A) ins;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Set<Integer> successor = new HashSet<Integer>();
      successor.add(count+1);
      liveInfo.succ.put(count,successor);
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Set<Integer> successor = new HashSet<Integer>();
      successor.add(count+1);
      liveInfo.succ.put(count,successor);
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      Instruction ins = (Instruction)argu;
      n.f0.accept(this, argu);
      Integer temp = (Integer) n.f1.accept(this, argu);
      ins.use.add(temp);
      String label = (String) n.f2.accept(this, argu);
      Set<Integer> successor = new HashSet<Integer>();
      successor.add(count+1);
      successor.add(labels.get(label));
      liveInfo.succ.put(count,successor);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String label = (String) n.f1.accept(this, argu);
      Set<Integer> successor = new HashSet<Integer>();
      successor.add(labels.get(label));
      liveInfo.succ.put(count,successor);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      Instruction ins = (Instruction) argu;
      n.f0.accept(this, argu);
      Integer temp1 = (Integer) n.f1.accept(this, argu);
      ins.use.add(temp1);
      n.f2.accept(this, argu);
      Integer temp2 = (Integer) n.f3.accept(this, argu);
      ins.use.add(temp2);
      Set<Integer> successor = new HashSet<Integer>();
      successor.add(count+1);
      liveInfo.succ.put(count,successor);
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      Instruction ins = (Instruction) argu;
      n.f0.accept(this, argu);
      Integer temp1 = (Integer) n.f1.accept(this, argu);
      ins.def.add(temp1);
      Integer temp2 = (Integer) n.f2.accept(this, argu);
      ins.use.add(temp2);
      n.f3.accept(this, argu);
      Set<Integer> successor = new HashSet<Integer>();
      successor.add(count+1);
      liveInfo.succ.put(count,successor);
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      Instruction ins = (Instruction) argu;
      n.f0.accept(this, argu);
      Integer temp = (Integer) n.f1.accept(this, argu);
      ins.def.add(temp);
      n.f2.accept(this, argu);
      Set<Integer> successor = new HashSet<Integer>();
      successor.add(count+1);
      liveInfo.succ.put(count,successor);
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Set<Integer> successor = new HashSet<Integer>();
      successor.add(count+1);
      liveInfo.succ.put(count,successor);
      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      count++;
      Instruction ins = new Instruction();                // For the return instruction
      liveInfo.use.put(count,ins.use);
      liveInfo.def.put(count,ins.def);
      argu = (A) ins;
      n.f3.accept(this, argu);
      Set<Integer> successor = new HashSet<Integer>();
      successor.add(0);                                   // indicates a return                                                                     
      liveInfo.succ.put(count,successor);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;
      Instruction ins = (Instruction) argu;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      R temp = n.f3.accept(this, argu);
      if(temp != null) {
        // max arg call can be taken here
        LinkedList<R> list = (LinkedList<R>) temp;
        if (maxArgSize < list.size()) 
          maxArgSize = list.size();

        for(int i=0;i<list.size();i++) {                
          ins.use.add((Integer) list.get(i));
        }
        // System.out.println(ins.use);                 // debug
      }
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      Instruction ins = (Instruction) argu;
      n.f0.accept(this, argu);
      Integer temp = (Integer) n.f1.accept(this, argu);
      ins.use.add(temp);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      Instruction ins = (Instruction) argu;
      _ret = n.f0.accept(this, argu);
      if( n.f0.which == 0) {    // temp
        ins.use.add((Integer)_ret);
      }
      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Integer temp = Integer.parseInt(n.f0.toString());
      _ret = (R) temp;
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R) n.f0.toString();
      return _ret;
   }

}
