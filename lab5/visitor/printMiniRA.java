//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class printMiniRA<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
    String function;
    RegAllocInfo info;
    Integer label;

    public printMiniRA(RegAllocInfo r) {
      info = r;
      function = null;
      label = 1;
    }

    public String temp2reg(Integer temp,Integer v) {
      Alloc allocation = info.regAlloc.get(function).get(temp);
      if(allocation.isReg)
        return allocation.register;
      else {
        System.out.println(" ALOAD v"+v+" SPILLEDARG "+allocation.spill);
        return ("v"+v);
      }
    }


   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         ArrayList<R> L = new ArrayList<R>();
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            L.add(e.nextElement().accept(this,argu));
            _count++;
         }
         return (R) L;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() ) {
         String l = (String) n.node.accept(this,argu);
         System.out.print(l+" ");
         return (R)l;
      }
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      function = "MAIN";
      
      System.out.println(function+" [0] ["+(info.stackAlloc.get(function)+info.maxCallArgSize.get(function))+"] ["+info.maxCallArgSize.get(function)+"]");
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      System.out.println("END");

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      System.out.println("// Number of  vars after packing = 0; Number of Spilled vars = 0");
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      function = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Integer params = (Integer) n.f2.accept(this, argu);
      n.f3.accept(this, argu);

      System.out.println(function+" ["+params+"] ["+(info.stackAlloc.get(function)+info.maxCallArgSize.get(function))+"] ["+info.maxCallArgSize.get(function)+"]");      
      
      Integer offset = (params>4)? (params-4) : 0;
      for(int i=0;i<8;i++) {
        System.out.println(" ASTORE SPILLEDARG "+(i+offset)+" s"+i);
      }
      for(int i=8;i<18;i++) {
        System.out.println(" ASTORE SPILLEDARG "+(i+offset)+" t"+(i-8));
      }
      if(params <= 4) {
        for(int i=0;i<params;i++)
          System.out.println(" MOVE s"+i+" a"+i);
      } else {
        for(int i=0;i<4;i++)
          System.out.println(" MOVE s"+i+" a"+i);
      }

      n.f4.accept(this, argu);
      for(int i=0;i<8;i++) {
        System.out.println(" ALOAD s"+i+" SPILLEDARG "+(i+offset));
      }
      for(int i=8;i<18;i++) {
        System.out.println(" ALOAD t"+(i-8)+" SPILLEDARG "+(i+offset));
      }
      System.out.println("END");
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println(" NOOP");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println(" ERROR");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Integer temp = (Integer) n.f1.accept(this, argu);
      String target = (String) n.f2.accept(this, argu);
      String register = temp2reg(temp,1);
      System.out.println(" CJUMP "+register+" "+target);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String target = (String) n.f1.accept(this, argu);
      System.out.println(" JUMP "+target);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Integer temp1 = (Integer) n.f1.accept(this, argu);
      Integer offset = (Integer) n.f2.accept(this, argu);
      Integer temp2 = (Integer) n.f3.accept(this, argu);
      String reg1 = temp2reg(temp1,0);
      String reg2 = temp2reg(temp2,1);
      System.out.println(" HSTORE "+reg1+" "+offset+" "+reg2);
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Integer temp1 = (Integer) n.f1.accept(this, argu);
      Integer temp2 = (Integer) n.f2.accept(this, argu);
      Integer offset = (Integer) n.f3.accept(this, argu);
      String reg1 = temp2reg(temp1,0);
      String reg2 = temp2reg(temp2,1);
      System.out.println(" HLOAD "+reg1+" "+reg2+" "+offset);
      if(reg1.equals("v0")) {
        System.out.println(" ASTORE SPILLEDARG "+info.regAlloc.get(function).get(temp1).spill+" v0");
      }
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {               
      R _ret=null;
      n.f0.accept(this, argu);
      Integer temp = (Integer) n.f1.accept(this, argu);
      argu = (A) temp;
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Object exp = (Object) n.f1.accept(this, argu);
      if(exp instanceof Register) {
        String register = temp2reg(((Register)exp).val,1);
        System.out.println(" PRINT "+register);
      } else {
        System.out.println(" PRINT "+exp);
      }
      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      Object exp = (Object) n.f0.accept(this, argu);
      boolean moveToStack = false;
      String register = "";
      Integer stack = 0;
      Integer temp  = (Integer) argu;
      if (info.regAlloc.get(function).get(temp).isReg) {
        register = info.regAlloc.get(function).get(temp).register;
      } else {
        moveToStack = true;
        stack =  info.regAlloc.get(function).get(temp).spill;
      }
      switch(n.f0.which) {
        case 0 : {
          if (moveToStack) {
            System.out.println(" ASTORE SPILLEDARG "+stack+" v0");
          } else {
            System.out.println(" MOVE "+register+" v0");
          }
          break;
        } 
        case 1 : {
          register = temp2reg(temp,0);
          if( exp instanceof Register) {
            exp = temp2reg(((Register)exp).val,1);
          }
          System.out.println(" MOVE "+register+" HALLOCATE "+exp);
          if(moveToStack) 
            System.out.println(" ASTORE SPILLEDARG "+stack+" "+register);
          break;
        }
        case 3 : {
          if (moveToStack) {
            if(exp instanceof Register) {
              exp = temp2reg(((Register)exp).val,1);
            }
            System.out.println(" MOVE v1 "+exp);
            System.out.println(" ASTORE SPILLEDARG "+stack+" v1");
          } else {
            if ( exp instanceof Register) {
              exp = temp2reg(((Register)exp).val,1);
            }
            System.out.println(" MOVE "+register+" "+exp);
          }
          break;
        }
      }
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      Object a = (Object) n.f3.accept(this, argu);
      if (a instanceof Register) {
        a = temp2reg(((Register)a).val,1);
      }
      System.out.println(" MOVE v0 "+a);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Object f = (Object) n.f1.accept(this, argu);
      if(f instanceof Register)
            f = temp2reg(((Register)f).val,1);      
      n.f2.accept(this, argu);
      ArrayList<Integer> args = (ArrayList<Integer>)n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      Integer argNum = 0;
      for(int i=0;i<args.size();i++) {
        String register = temp2reg(args.get(i),0);
        if (argNum<=3) {
          System.out.println(" MOVE a"+argNum+" "+register);
        } else {
          System.out.println(" PASSARG "+(argNum-3)+" "+register);
        }
        argNum++;
      }
      System.out.println(" CALL "+f);
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {                                    // need to take care of  NE
      R _ret=null;
      Integer temp = (Integer) argu;
      String operator = (String) n.f0.accept(this, argu);
      Integer a1 = (Integer) n.f1.accept(this, argu);
      Object a2 = (Object) n.f2.accept(this, argu);

      String reg1 = temp2reg(a1,1);
      if (info.regAlloc.get(function).get(temp).isReg) {
        String register = info.regAlloc.get(function).get(temp).register;
        if("LE".equals(operator)) {
          if(a2 instanceof Register)
            a2 = temp2reg(((Register)a2).val,1);
          System.out.println(" MOVE v0 "+a2);
          System.out.println(" MOVE v0 PLUS v0 1");
          reg1 = temp2reg(a1,1);
          System.out.println(" MOVE "+register+" LT "+reg1+" v0");
        } else if("NE".equals(operator)) {
          String L1 = "A"+label++;
          String L2 = "A"+label++;
          if(a2 instanceof Register)
            a2 = temp2reg(((Register)a2).val,1);  
          System.out.println(" MOVE v0 LT "+reg1+" "+a2);
          System.out.println(" CJUMP v0 "+L1);                // v0 is 1 done
          System.out.println(" JUMP "+L2);             
          System.out.println(L1+" MOVE v0 "+a2);
          reg1 = temp2reg(a1,1);
          System.out.println(" MOVE v0 LT v0 "+reg1);
          System.out.println(L2+" NOOP");
          System.out.println(" MOVE "+register+" v0");
        } else {
          if(a2 instanceof Register)
            a2 = temp2reg(((Register)a2).val,0);
          System.out.println(" MOVE "+register+" "+operator+" "+reg1+" "+a2);
        }
      } else {
        Integer stack =  info.regAlloc.get(function).get(temp).spill;
        if("LE".equals(operator)) {
          if(a2 instanceof Register)
            a2 = temp2reg(((Register)a2).val,1);
          System.out.println(" MOVE v0 "+a2);
          System.out.println(" MOVE v0 PLUS v0 1");
          reg1 = temp2reg(a1,1);
          System.out.println(" MOVE v0 LT "+reg1+" v0");
          System.out.println(" ASTORE SPILLEDARG "+stack+" v0");
        } else if("NE".equals(operator)) {
          String L1 = "A"+label++;
          String L2 = "A"+label++;  
          if(a2 instanceof Register)
            a2 = temp2reg(((Register)a2).val,1);
          System.out.println(" MOVE v0 LT "+reg1+" "+a2);
          System.out.println(" CJUMP v0 "+L1);                // v0 is 1 done
          System.out.println(" JUMP "+L2);             
          System.out.println(L1+" MOVE v0 "+a2);
          reg1 =temp2reg(a1,1);
          System.out.println(" MOVE v0 LT v0 "+reg1);
          System.out.println(L2+" NOOP");
          System.out.println(" ASTORE SPILLEDARG "+stack+" v0");
        } else {
          if(a2 instanceof Register)
            a2 = temp2reg(((Register)a2).val,0);
          System.out.println(" MOVE v0 "+operator+" "+reg1+" "+a2);
          System.out.println(" ASTORE SPILLEDARG "+stack+" v0");
        }
      }
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String operator = "";
      switch(n.f0.which) {
        case 0 : operator = "LE"; break;
        case 1 :  operator = "NE"; break;
        case 2 : operator = "PLUS"; break;
        case 3 : operator = "MINUS"; break;
        case 4 : operator = "TIMES"; break;
        case 5 : operator = "DIV"; break;
      }
      _ret = (R) operator;
      return _ret;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      if(n.f0.which == 0) {
        // String register = temp2reg((Integer)_ret,1);
        Register register = new Register((Integer) _ret);
        _ret = (R) register;
      }
      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      Integer temp = Integer.parseInt(n.f0.toString());
      _ret = (R) temp;
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R) n.f0.toString();
      return _ret;
   }

}

class Register {
  public Integer val;
  public Register(Integer a ) {
    val = a;
  }
}